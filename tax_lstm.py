# -*- coding: utf-8 -*-
"""Tax-LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kAQdjpaPUCFn8bW2xI9ibwbsGupwQvDX
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf

df=pd.read_csv('TaxInfo.csv')
df=df.dropna(how='any')
df=df.drop(columns=['Unnamed: 0'])
df

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
df['PoliticalParty']=le.fit_transform(df['PoliticalParty'])
df

X=df.iloc[:,:-1].values
y=df.iloc[:,-1].values

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=42)

X_train

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
X_train[:,:1]=sc.fit_transform(X_train[:,:1])
X_test[:,:1]=sc.fit_transform(X_test[:,:1])
X_train[:,1:2]=sc.fit_transform(X_train[:,1:2])
X_test[:,1:2]=sc.fit_transform(X_test[:,1:2])

X_train

X_train=X_train.astype(np.float32)
X_train

X_test=X_test.astype(np.float32)
X_test

y_test=y_test.astype(np.float32)
y_test

y_train=y_train.astype(np.float32)
y_train

y_test=tf.keras.utils.to_categorical(y_test)
y_train=tf.keras.utils.to_categorical(y_train)

X_test=X_test.reshape((X_test.shape[0], X_test.shape[1], 1))

X_train= X_train.reshape((X_train.shape[0], X_train.shape[1], 1))

lstm = tf.keras.models.Sequential()
lstm.add(tf.keras.layers.Dense(units=500, activation='relu'))
lstm.add(tf.keras.layers.Dense(units=1000, activation='relu'))
lstm.add(tf.keras.layers.LSTM(units = 1500))
lstm.add(tf.keras.layers.Dense(units=2500, activation='relu'))
lstm.add(tf.keras.layers.Dense(3,activation='softmax'))
print("Model initialised")

lstm.compile(optimizer = 'adam', loss = 'categorical_crossentropy',metrics=['accuracy'])
history=lstm.fit(X_train, y_train, batch_size=500, epochs=250)
lstm.save('Tax.h5')

plt.figure(0)
plt.plot(history.history['accuracy'], label='training accuracy')
plt.title('Accuracy')
plt.xlabel('epochs')
plt.ylabel('accuracy')
plt.legend()
plt.title('Results for ANN training-1')
plt.savefig('Accuracy.png')

plt.figure(1)
plt.plot(history.history['loss'], label='training loss')
plt.title('Loss')
plt.xlabel('epochs')
plt.ylabel('loss')
plt.legend()
plt.title('Results for ANN training-1')
plt.savefig('Loss.png')

model = tf.keras.models.load_model('Tax.h5')
print("Loaded model from disk")

res = model.predict(X_test)
res=np.round(res)
np.set_printoptions(precision=2)
print(res)

from sklearn.metrics import accuracy_score
print("Accuracy Score for the algorithm=>{}%".format(round(accuracy_score(y_test,res)*100),2))